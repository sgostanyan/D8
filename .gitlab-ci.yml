variables:
  ##############################################################################
  # Common variables for all jobs, edit this part to your needs.
  #
  # Make CI more verbose in case of problem.
  # CI_DEBUG_TRACE: "1"
  #
  # [COMPOSER.JSON] Path is relative to project root, 'web' is for Drupal
  # Composer template, change it if you are using 'docroot'.
  WEB_ROOT: "web"

  ##############################################################################
  # [DEPLOY] Global settings for all env used for deploy.
  # Just an example, adapt with 'Deploy jobs definition' at the end of this
  # file.
  ##############################################################################
  #
  # Remote machine access and information.
  # USER_NAME: "ubuntu"
  # DRUPAL_FOLDER: "/var/www/html/MY_DRUPAL_ROOT"
  # Deploy environments configuration, add or remove depending deploy jobs.
  # Testing config, set host or ip
  TESTING_HOST: "localhost"
  # Staging config, set host or ip
  STAGING_HOST: "localhost"
  # Production config, set host or ip
  PRODUCTION_HOST: "localhost"

  ##############################################################################
  # All reports will be available in artifacts from this folder.
  REPORT_DIR: "reports"

################################################################################
# Define your stages, this will be "pipelines" in gitlab.
#   https://docs.gitlab.com/ee/ci/pipelines.html
################################################################################

stages:
  - build
  - deploy to testing
  - deploy to staging
  - deploy to production

################################################################################
# Base image for all ci actions, see https://gitlab.com/mog33/drupal8ci
################################################################################

image: mogtofu33/drupal8ci:8.6-no-drupal

################################################################################
# Gitlab ci templates for common jobs to avoid repeat, see
#   https://docs.gitlab.com/ee/ci/yaml/#anchors
################################################################################

# Small repetitive tasks.
.ensure_report:
  - &ensure_report
      mkdir -p ${REPORT_DIR} && chmod -R 777 ${REPORT_DIR}

.default_artifacts: &default_artifacts
  paths:
    - ${REPORT_DIR}/*.html
    - ${REPORT_DIR}/*.svg
  # Name will be based on job and branch.
  name: "${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
  # How long do we keep reports files?
  expire_in: 2 day
  # Force artifacts even if the job fail.
  when: always

# Common for all jobs.
before_script:
  - *ensure_report

################################################################################
# Jobs definition.
#   https://docs.gitlab.com/ee/ci/pipelines.html#jobs
#
# All jobs are set in a stage.
################################################################################

################################################################################
# Build and tests jobs, not for master.
################################################################################

# Sample of a build, considering a Drupal 8 with composer.
# For more samples see
#   https://docs.gitlab.com/ee/ci/examples/deployment/composer-npm-deploy.html
# Two scenarios here:
# - Your repo include only custom code for a composer based project
# - Your repo include at least a composer.json file to install Drupal
Build:
  stage: build
  tags:
    - docker
  except:
    - master
  only:
    - testing
    - tags
  script:
    # [COMPOSER.JSON]
    # Download Drupal project when no composer.json.
    - robo download:drupal-project
    # Because create-project need an empty folder we copy the downloaded drupal.
    - cp -rf drupal/* ${CI_PROJECT_DIR} && cp -f drupal/.e* ${CI_PROJECT_DIR} && cp -f drupal/.g* ${CI_PROJECT_DIR} || true
    #
    # If a composer.json is present, validate file and install.
    # - composer --verbose --no-check-all --no-check-publish validate
    # - robo install:drupal
  # On build we cache the composer, web folders.
  cache:
    key: drupal-$CI_BUILD_REF_NAME
    paths:
      # [COMPOSER.JSON] Remove drupal if you are using your composer.json
      - drupal
      - vendor
      - web
  artifacts:
    paths:
      # Build files for deploy/release.
      - vendor
      - web
      - drush
      - scripts
      - composer.json
      - composer.lock
      # [COMPOSER.JSON] Specific to drupal-composer/drupal-project.
      - .env.example
      - load.environment.php
    expire_in: 1 day

################################################################################
# [DEPLOY] Deploy jobs definition.
#
# This is a sample workflow, testing is run on master and testing branches
# pushes or merge, other deploy are manual. Using a basic bash deploy, you must
# adapt if you are using a specific deploy process.
#
# You need to be sure we can ssh to the machine, a deploy key must be manually
# added on the target in  ~/.ssh/authorized_keys
# Private key name and values must be set on Gitlab:
#   Settings > CI / CD > Variables
################################################################################

# Basic docker image with ssh to be able to access a remote.
# Each access must add a ssh key, see samples below.
.deploy_template: &deploy_template
  image: alpine:latest
  tags:
    - docker
  before_script:
    - apk --no-cache add openssh-client
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # Avoid warning on connection.
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  when: manual

Deploy to testing:
  stage: deploy to testing
  <<: *deploy_template
  only:
    - testing
    - master
    - tags
  environment:
    name: testing
    url: http://${TESTING_HOST}
  script:
    - echo -e "${TESTING_PRIVATE_KEY}" > ~/.ssh/id_rsa
    - chmod 400 ~/.ssh/id_rsa
    # We can now ssh and run any deploy script.
    # - ssh -T $USER_NAME@$TESTING_HOST
    #     "${DRUPAL_FOLDER}/scripts/my_deploy_script.sh;"

Deploy to staging:
  stage: deploy to staging
  <<: *deploy_template
  only:
    - master
    - tags
  environment:
    name: staging
    url: http://${STAGING_HOST}
  script:
    - echo -e "${STAGING_PRIVATE_KEY}" > ~/.ssh/id_rsa
    - chmod 400 ~/.ssh/id_rsa
    # We can now ssh and run any deploy script.
    # - ssh -T $USER_NAME@$TESTING_HOST
    #     "${DRUPAL_FOLDER}/scripts/my_deploy_script.sh;"

Deploy to production:
  stage: deploy to production
  <<: *deploy_template
  only:
    - master
    - tags
  environment:
    name: production
    url: http://${PRODUCTION_HOST}
  script:
    - echo -e "${PRODUCTION_PRIVATE_KEY}" > ~/.ssh/id_rsa
    - chmod 400 ~/.ssh/id_rsa
    # We can now ssh and run any deploy script.
    # - ssh -T $USER_NAME@$TESTING_HOST
    #     "${DRUPAL_FOLDER}/scripts/my_deploy_script.sh;"
