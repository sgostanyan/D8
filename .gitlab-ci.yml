variables:
  ##############################################################################
  # Common variables for all jobs, edit this part to your needs.
  #
  # Make CI more verbose in case of problem.
  # CI_DEBUG_TRACE: "1"
  #
  # [COMPOSER.JSON] Path is relative to project root, 'web' is for Drupal
  # Composer template, change it if you are using 'docroot'.
  WEB_ROOT: "web"

  ##############################################################################
  # [DEPLOY] Global settings for all env used for deploy.
  # Just an example, adapt with 'Deploy jobs definition' at the end of this
  # file.
  ##############################################################################
  #
  # Remote machine access and information.
  USER_NAME: "ubuntu"
  DRUPAL_FOLDER_TESTING: "/var/www/html/MY_DRUPAL_ROOT"
  DRUPAL_FOLDER_STAGING: "/var/www/html/MY_DRUPAL_ROOT"
  DRUPAL_FOLDER_PROD: "/var/www/d8"
  # Deploy environments configuration, add or remove depending deploy jobs.
  # Testing config, set host or ip
  TESTING_HOST: "localhost"
  # Staging config, set host or ip
  STAGING_HOST: "localhost"
  # Production config, set host or ip
  PRODUCTION_HOST: "sarven.tk"

  ##############################################################################
  # All reports will be available in artifacts from this folder.
  REPORT_DIR: "reports"

################################################################################
# Define your stages, this will be "pipelines" in gitlab.
#   https://docs.gitlab.com/ee/ci/pipelines.html
################################################################################

stages:
  - build
  - deploy to testing
  - deploy to staging
  - deploy to production

################################################################################
# Base image for all ci actions, see https://gitlab.com/mog33/drupal8ci
################################################################################

image: mogtofu33/drupal8ci:8.6-no-drupal

################################################################################
# Gitlab ci templates for common jobs to avoid repeat, see
#   https://docs.gitlab.com/ee/ci/yaml/#anchors
################################################################################

# Small repetitive tasks.
.ensure_report:
  - &ensure_report
      mkdir -p ${REPORT_DIR} && chmod -R 777 ${REPORT_DIR}

.default_artifacts: &default_artifacts
  paths:
    - ${REPORT_DIR}/*.html
    - ${REPORT_DIR}/*.svg
  # Name will be based on job and branch.
  name: "${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
  # How long do we keep reports files?
  expire_in: 2 day
  # Force artifacts even if the job fail.
  when: always

# Common for all jobs.
before_script:
  - *ensure_report

################################################################################
# [BUILD]
################################################################################

## Création d'une archive de livraison avec gestion des dépendances par composer
Build Drupal:
  stage: build
  variables:
    GIT_STRATEGY: fetch
  before_script:
    # suppression du répertoire packages qui contient les anciennes archives de livraison
    - rm -rf packages
    # recréation de ce répertoire
    - mkdir -p packages
    # mise en variable du chemin de l'archive de livraison du build en cours
    - DRUPAL_PACKAGE_NAME="packages/${CI_PROJECT_NAME}_${CI_PIPELINE_ID}.tar.bz2"
  script:
    # installation des dépendances
    - composer install
    # création de l'archive de déploiement
    # les fichiers à packager
    - tar cfj ${DRUPAL_PACKAGE_NAME} #./composer.json ./load.environment.php ./views_infinite_scroll.post_update.php ./web ./vendor ./config ./drush ./src ./scripts ./patches
  artifacts:
    # permet l'upload de ce package de livraison buildé sur notre gitlab afin que les tâche de deploy (VA, PREPROD, PROD) puisse l'utiliser
    paths:
      - packages/drupal_*.tar.bz2
    expire_in: 20 minutes
  tags:
    # seul un runner tagé biblio-drupal pour effectuer ce job
    - deployment
  #when: manual

################################################################################
# [DEPLOY] Deploy jobs definition.
#
# This is a sample workflow, testing is run on master and testing branches
# pushes or merge, other deploy are manual. Using a basic bash deploy, you must
# adapt if you are using a specific deploy process.
#
# You need to be sure we can ssh to the machine, a deploy key must be manually
# added on the target in  ~/.ssh/authorized_keys
# Private key name and values must be set on Gitlab:
#   Settings > CI / CD > Variables
################################################################################

# Basic docker image with ssh to be able to access a remote.
# Each access must add a ssh key, see samples below.
.deploy_template: &deploy_template
  image: alpine:latest
  tags:
    - docker
  before_script:
    - apk --no-cache add openssh-client
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # Avoid warning on connection.
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
#  when: manual

#Deploy to testing:
#  stage: deploy to testing
#  <<: *deploy_template
#  only:
#    - testing
#    - master
#    - tags
#  environment:
#    name: testing
#    url: http://${TESTING_HOST}
#  script:
#    - echo -e "${TESTING_PRIVATE_KEY}" > ~/.ssh/id_rsa
#    - chmod 400 ~/.ssh/id_rsa
    # We can now ssh and run any deploy script.
    # - ssh -T $USER_NAME@$TESTING_HOST
    #     "${DRUPAL_FOLDER}/scripts/my_deploy_script.sh;"

#Deploy to staging:
#  stage: deploy to staging
#  <<: *deploy_template
#  only:
#    - master
#    - tags
#  environment:
#    name: staging
#    url: http://${STAGING_HOST}
#  script:
#    - echo -e "${STAGING_PRIVATE_KEY}" > ~/.ssh/id_rsa
#    - chmod 400 ~/.ssh/id_rsa
    # We can now ssh and run any deploy script.
    # - ssh -T $USER_NAME@$TESTING_HOST
    #     "${DRUPAL_FOLDER}/scripts/my_deploy_script.sh;"

Deploy to production:
  stage: deploy to production
  <<: *deploy_template
  only:
    - master
    - tags
  environment:
    name: production
    url: http://${PRODUCTION_HOST}
  dependencies:
    - Build Drupal
  script:
    - echo -e "${PRODUCTION_PRIVATE_KEY}" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    # We can now ssh and run any deploy script.
    - tar jxf ${DRUPAL_PACKAGE_NAME} -C ~/deploy_dir
    - scp ${DRUPAL_PACKAGE_NAME} $USER_NAME@$PRODUCTION_HOST:/var/www/deploy
    - ssh -T $USER_NAME@$PRODUCTION_HOST "tar jxf /var/www/deploy/${DRUPAL_PACKAGE_NAME} -C ${DRUPAL_FOLDER_PROD}"
    - ssh -T $USER_NAME@$PRODUCTION_HOST "cd ${DRUPAL_FOLDER_PROD}/${WEB_ROOT} && git pull && ${DRUPAL_FOLDER_PROD}/scripts/prod_deploy_script.sh;"
